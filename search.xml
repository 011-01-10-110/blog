<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 源码解析(1)</title>
      <link href="/2023/05/23/Vue-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1/"/>
      <url>/2023/05/23/Vue-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue源码分析-CreateApp"><a href="#Vue源码分析-CreateApp" class="headerlink" title="Vue源码分析-CreateApp"></a>Vue源码分析-CreateApp</h2><h3 id="官网解释"><a href="#官网解释" class="headerlink" title="官网解释"></a>官网解释</h3><p>创建一个应用实例</p><ul><li><p>类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent: Component, rootProps?: <span class="built_in">object</span></span>): <span class="title">App</span></span></span><br></pre></td></tr></table></figure></li><li><p>详细信息</p><p>第一个参数是根组件。第二个参数可选，它是要传递给根组件的 props。</p></li><li><p>示例</p><p>可以直接内联根组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">  <span class="comment">/* root component options */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以使用从别处导入的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br></pre></td></tr></table></figure></li><li><p>源码位置</p><p>packages/runtime-core/src/apiCreateApp.ts</p></li><li><p>函数名</p><p>createAppAPI</p></li><li><p>mini-vue中的实现（简化版vue实现）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAppAPI</span>(<span class="params">render</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> app = &#123;</span><br><span class="line">      <span class="attr">_component</span>: rootComponent,</span><br><span class="line">      <span class="function"><span class="title">mount</span>(<span class="params">rootContainer</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;基于根组件创建 vnode&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> vnode = createVNode(rootComponent);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;调用 render，基于 vnode 进行开箱&quot;</span>);</span><br><span class="line">        render(vnode, rootContainer);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="createApp源码内函数处理"><a href="#createApp源码内函数处理" class="headerlink" title="createApp源码内函数处理"></a>createApp源码内函数处理</h3><ul><li><p>部分源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAppAPI</span>&lt;<span class="title">HostElement</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  render: RootRenderFunction&lt;HostElement&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  hydrate?: RootHydrateFunction</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">CreateAppFunction</span>&lt;<span class="title">HostElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isFunction(rootComponent)) &#123;</span><br><span class="line">    rootComponent = extend(&#123;&#125;, rootComponent)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (rootProps != <span class="literal">null</span> &amp;&amp; !isObject(rootProps)) &#123;</span><br><span class="line">    __DEV__ &amp;&amp; warn(<span class="string">`root props passed to app.mount() must be an object.`</span>)</span><br><span class="line">    rootProps = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = createAppContext()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> app: App = (context.app = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__COMPAT__) &#123;</span><br><span class="line">    installAppCompatProperties(app, context, render)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建context源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createApp经过一些列判断之后使用createAppContext，创建了一个空的根组件对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAppContext</span>(<span class="params"></span>): <span class="title">AppContext</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">isNativeTag</span>: NO,</span><br><span class="line">      <span class="attr">performance</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">globalProperties</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">optionMergeStrategies</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">errorHandler</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="attr">warnHandler</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mixins</span>: [],</span><br><span class="line">    <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">directives</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">provides</span>: <span class="built_in">Object</span>.create(<span class="literal">null</span>),</span><br><span class="line">    <span class="attr">optionsCache</span>: <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">    <span class="attr">propsCache</span>: <span class="keyword">new</span> <span class="built_in">WeakMap</span>(),</span><br><span class="line">    <span class="attr">emitsCache</span>: <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完context后，给context.app赋值, 其中包含的属性及含义：</p><ul><li><p>_uid</p></li><li><p>_component（createApp传入的rootComponent处理来的）</p></li><li><p>_props（createApp传入的rootProps处理来的）</p></li><li><p>_container mount传入的rootContainer</p></li><li><p>_context（context实例）</p></li><li><p>_instance (mount时创建的vnode的component)</p></li><li><p>version（Vue版本）</p></li><li><p>config</p><p>特殊处理设置getter、setter</p><p>getter 返回 context.config</p><p>setter 开发环境提示不让直接更改该属性</p></li><li><p>use 对应app.use(plugin: Plugin, …options: any[])</p></li><li><p>mixin 方法</p><p>如果支持选项式API则将传入的mixin存放到context.mixins<br>内部有去重处理</p></li><li><p>component 同app.component()</p></li><li><p>directive 同 app.directive()</p></li><li><p>mount</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mount(</span><br><span class="line">  rootContainer: HostElement,</span><br><span class="line">  isHydrate?: <span class="built_in">boolean</span>,</span><br><span class="line">  isSVG?: <span class="built_in">boolean</span></span><br><span class="line">): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 创建vnode</span></span><br><span class="line">  <span class="keyword">const</span> vnode = createVNode(rootComponent, rootProps)</span><br><span class="line">  <span class="comment">// store app context on the root VNode.</span></span><br><span class="line">  <span class="comment">// this will be set on the root instance on initial mount.</span></span><br><span class="line">  <span class="comment">// 将当前的上下文给vnode挂上</span></span><br><span class="line">  vnode.appContext = context</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 判断用那个函数渲染</span></span><br><span class="line">  <span class="keyword">if</span> (isHydrate &amp;&amp; hydrate) &#123;</span><br><span class="line">    hydrate(vnode <span class="keyword">as</span> VNode&lt;Node, Element&gt;, rootContainer <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    render(vnode, rootContainer, isSVG)</span><br><span class="line">  &#125;</span><br><span class="line">  app._container = rootContainer <span class="comment">// 将mount传入的rootContainer赋值给_container</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">    <span class="comment">// 将vnode的component赋值给app的_instance</span></span><br><span class="line">    app._instance = vnode.component</span><br><span class="line">    devtoolsInitApp(app, version)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个根组件实例</span></span><br><span class="line">  <span class="keyword">return</span> getExposeProxy(vnode.component!) || vnode.component!.proxy</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>unmount</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">unmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  render(<span class="literal">null</span>, app._container) <span class="comment">// 卸载应用</span></span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  app._instance = <span class="literal">null</span> <span class="comment">// 将_instance赋空</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">delete</span> app._container.__vue_app__ <span class="comment">// 删除__vue_app__标记</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>provide</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">provide</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 提供一个值，可以在应用中的所有后代组件中注入使用</span></span><br><span class="line">  context.provides[key <span class="keyword">as</span> <span class="built_in">string</span> | symbol] = value</span><br><span class="line">  <span class="comment">// 返回当前实例可以链式调用</span></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>runWithContext <code>3.3+</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">runWithContext</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 当前应用</span></span><br><span class="line">  currentApp = app</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行回调函数</span></span><br><span class="line">    <span class="keyword">return</span> fn()</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentApp = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>app属性参考，官网地址: <a href="https://cn.vuejs.org/api/application.html">https://cn.vuejs.org/api/application.html</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> CreateApp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack更换vite</title>
      <link href="/2022/11/07/webpack%E6%9B%B4%E6%8D%A2vite/"/>
      <url>/2022/11/07/webpack%E6%9B%B4%E6%8D%A2vite/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么选择vite"><a href="#为什么选择vite" class="headerlink" title="为什么选择vite"></a>为什么选择vite</h2><p>借用vite官网的介绍<a href="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9vite">https://cn.vitejs.dev/guide/why.html#the-problems</a><br>本人更换vite主要就是两个原因：</p><ol><li>webpack dev环境启动太慢了，公司项目启动平均要一分半钟；</li><li>webpack build需要的内存较大，公司项目平均2.3G内存；</li></ol><h2 id="初步准备"><a href="#初步准备" class="headerlink" title="初步准备"></a>初步准备</h2><ul><li>如果不想要webpack和vite共存，那么我建议直接新建一个文件夹。</li><li>我所用的项目为vue2.7项目（所以我会讲我用到的vue2.x的包，3.x的建议直接yarn create vite my-vue-app –template vue）。</li></ul><h2 id="更换过程"><a href="#更换过程" class="headerlink" title="更换过程"></a>更换过程</h2><ul><li><p>首先 npm init 创建package.json， 已有项目直接复制过来就好</p></li><li><p>安装必要的npm包，<code>vite</code>, <code>@vitejs/plugin-vue2</code>(vue3.x安装<code>@vitejs/plugin-vue</code>)，项目中需要的其他包根据自己的需要添加，以上为vite运行必须的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite @vitejs/plugin-vue2 -D</span><br></pre></td></tr></table></figure></li><li><p>新建vite.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  reutrn &#123;</span><br><span class="line">    <span class="comment">// 写vue的一般都用‘@’作为‘src’的别名，我这里就配了这一个，有需要则自行添加</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: fileURLToPath(<span class="keyword">new</span> URL(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.meta.url))</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// 解析vue2.x需要的插件</span></span><br><span class="line">      vue()</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">      <span class="comment">// dev环境代理服务</span></span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="string">&#x27;/api&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 打包时去掉debugger和console</span></span><br><span class="line">    <span class="attr">esbuild</span>: &#123;</span><br><span class="line">      <span class="attr">drop</span>: command === <span class="string">&#x27;build&#x27;</span> ? [<span class="string">&#x27;debugger&#x27;</span>, <span class="string">&#x27;console&#x27;</span>] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>此时将旧版项目的src复制到新的项目下，目录结构为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">  compontents/</span><br><span class="line">    **.vue</span><br><span class="line">  router/</span><br><span class="line">    index.js</span><br><span class="line">  store/</span><br><span class="line">    index.js</span><br><span class="line">  utils/</span><br><span class="line">  App.vue</span><br><span class="line">  main.js</span><br><span class="line">index.html</span><br><span class="line">jsconfig.json</span><br><span class="line">package.json</span><br><span class="line">vite.config.js</span><br></pre></td></tr></table></figure></li><li><p>main.js 需要进行调整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有new Vue部分修改，其余部分可继续沿用，例如element-ui</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line">Vue.use(ElementUI); <span class="comment">// 全局使用ElementUI</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 原</span></span><br><span class="line"><span class="comment">// const instance = new Vue(&#123;</span></span><br><span class="line"><span class="comment">//   el: &#x27;#app&#x27;,</span></span><br><span class="line"><span class="comment">//   router,</span></span><br><span class="line"><span class="comment">//   store,</span></span><br><span class="line"><span class="comment">//   components: &#123; App &#125;,</span></span><br><span class="line"><span class="comment">//   template: &#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// export default instance</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure></li><li><p>index.html需要增加main.js的引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>此时项目应该可以运行起来了</p><h2 id="npm包在生产环境进行cdn引入"><a href="#npm包在生产环境进行cdn引入" class="headerlink" title="npm包在生产环境进行cdn引入"></a>npm包在生产环境进行cdn引入</h2><p>本人使用<code>rollup-plugin-external-globals</code>包进行cdn的使用</p><ul><li><p>安装 <code>rollup-plugin-external-globals</code>包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i rollup-plugin-external-globals -D</span><br></pre></td></tr></table></figure></li><li><p>修改vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略上面配置过的</span></span><br><span class="line">... </span><br><span class="line"><span class="keyword">import</span> externalGlobals <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-external-globals&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  reutrn &#123;</span><br><span class="line">    <span class="comment">// 省略上面配置过的 </span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 增加build打包后cdn的配置</span></span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">        <span class="comment">// 代码中引用的包名</span></span><br><span class="line">        <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;element-ui&#x27;</span>],</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="comment">// 属性名为项目中使用的名字，值为cdn暴露的全局变量名</span></span><br><span class="line">          externalGlobals(&#123;</span><br><span class="line">            <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui@2.15.10/lib/theme-chalk/index.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@2.7.13/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui@2.15.10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@3.6.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>此时打包已经将<code>vue</code>、<code>element-ui</code>、<code>vue-router</code>排除了。</p><div class="note info flat"><p>使用<code>vite-plugin-html</code>可以进行html内的cdn自动导入</p></div><h2 id="cdn自动引入"><a href="#cdn自动引入" class="headerlink" title="cdn自动引入"></a>cdn自动引入</h2><p>使用<code>vite-plugin-html</code>包完成cdn自动引入index.html</p><ul><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite-plugin-html -D</span><br></pre></td></tr></table></figure></li><li><p>创建一个js文件，我这里取名cdn.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/cdn.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 属性名自己起</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">    <span class="string">&#x27;https://unpkg.com/vue@2.7.13/dist/vue.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://unpkg.com/element-ui@2.15.10&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://unpkg.com/vue-router@3.6.5&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">    <span class="string">&#x27;https://unpkg.com/element-ui@2.15.10/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>修改vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="comment">// 省略上面配置过的</span></span><br><span class="line">... </span><br><span class="line"><span class="keyword">import</span> &#123; createHtmlPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-html&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cdn <span class="keyword">from</span> <span class="string">&#x27;/config/cdn.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  reutrn &#123;</span><br><span class="line">    <span class="comment">// 省略上面配置过的 </span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      ...</span><br><span class="line">      createHtmlPlugin(&#123;</span><br><span class="line">        <span class="attr">minify</span>: <span class="literal">true</span>, <span class="comment">// 是否压缩 html</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果你想将 `index.html`存放在指定文件夹，可以修改它，否则不需要配置</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@default </span>index.html</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">template</span>: <span class="string">&quot;/index.html&quot;</span>,</span><br><span class="line">        <span class="attr">inject</span>: &#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="comment">// 这个属性名也是自己起</span></span><br><span class="line">            <span class="attr">injectScript</span>: cdn.js,</span><br><span class="line">            <span class="attr">injectLink</span>: cdn.css,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  &lt;% for (let i in injectLink) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= injectLink[i] %&gt;&quot;</span> /&gt;</span></span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里的injectScript就是vite.config.js里自己起的名 --&gt;</span></span><br><span class="line">  &lt;% for (let i in injectScript) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= injectScript[i] %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="启用Gzip"><a href="#启用Gzip" class="headerlink" title="启用Gzip"></a>启用Gzip</h2><ul><li><p>安装<code>vite-plugin-compression</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite-plugin-compression -D</span><br></pre></td></tr></table></figure></li><li><p>vite.config.js使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line">... <span class="comment">// 省略上面已有的</span></span><br><span class="line"><span class="keyword">import</span> viteCompression <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-compression&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  reutrn &#123;</span><br><span class="line">    <span class="comment">// 省略上面配置过的 </span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 增加build打包后cdn的配置</span></span><br><span class="line">    <span class="attr">build</span>: &#123;</span><br><span class="line">      <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          ...</span><br><span class="line">          viteCompression()</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="启用打包分析"><a href="#启用打包分析" class="headerlink" title="启用打包分析"></a>启用打包分析</h2><ul><li><p>安装<code>rollup-plugin-visualizer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i rollup-plugin-visualizer -D</span><br></pre></td></tr></table></figure></li><li><p>vite.config.js中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="comment">// 省略上面配置过的</span></span><br><span class="line">... </span><br><span class="line"><span class="keyword">import</span> &#123; visualizer &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-visualizer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  reutrn &#123;</span><br><span class="line">    <span class="comment">// 省略上面配置过的 </span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      ...</span><br><span class="line">      visualizer(&#123; <span class="attr">open</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="插件总结"><a href="#插件总结" class="headerlink" title="插件总结"></a>插件总结</h2><ul><li><code>vite</code> vite包</li><li><code>@vitejs/plugin-vue2</code> vue2.x语法解析</li><li><code>vite-plugin-compression</code> Gzip压缩</li><li><code>rollup-plugin-visualizer</code> 打包依赖分析</li><li><code>vite-plugin-eslint</code> eslint校验,需配合<code>eslint</code>, <code>@babel/eslint-parser</code>, <code>eslint-plugin-vue</code></li><li><code>@vitejs/plugin-vue2-jsx</code> vue2.x jsx插件</li><li><code>vite-plugin-mock</code> mock插件，需配合<code>mockjs</code>包</li><li><code>vite-plugin-html</code> html模版自动导入cdn</li></ul>]]></content>
      
      
      <categories>
          
          <category> 打包工具 </category>
          
          <category> vite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打包工具 </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS算法基础-队列</title>
      <link href="/2022/01/07/JS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E9%98%9F%E5%88%97/"/>
      <url>/2022/01/07/JS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="队列的概念"><a href="#队列的概念" class="headerlink" title="队列的概念"></a>队列的概念</h1><p>​        队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。意如其名，就像排队一样，从尾部添加，从顶部移除，新添的元素必须排在队列的末尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">subgraph a[队列]</span><br><span class="line">q[...]--&gt;3--&gt;2</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subgraph b[执行]</span><br><span class="line">q1[1]</span><br><span class="line">end</span><br><span class="line">2--&gt;q1</span><br></pre></td></tr></table></figure><h1 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="attr">items</span>: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 入队</span></span><br><span class="line"><span class="comment">   * 向队列尾部添加一个（或多个）新的项</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">el</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  enqueue(el): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (el <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.items.push(...el)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.items.push(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 出队</span></span><br><span class="line"><span class="comment">   * 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  dequeue(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回队列中第一个元素——最先被添加，也将是最先被移除的元素。</span></span><br><span class="line"><span class="comment">   * 队列不做任何变动（不移除元素，只返回元素信息——与Stack类的peek方法非常类似）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  front(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断队列是否为空</span></span><br><span class="line"><span class="comment">   * 如果队列中不包含任何元素，返回true，否则返回false</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  isEmpty(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回队列包含的元素个数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  size(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">  <span class="attr">element</span>: T</span><br><span class="line">  <span class="attr">priority</span>: K</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">el, priority</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = el</span><br><span class="line">    <span class="built_in">this</span>.priority = priority</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123;</span><br><span class="line">  <span class="attr">items</span>: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>入队</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>el &#123;T&#125; 需要入队的元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>priority &#123;number&#125; 优先级</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  enqueue&lt;T&gt; (el: T, <span class="attr">priority</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个带优先级的对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> QueueElement&lt;T, <span class="built_in">number</span>&gt;(el, priority)</span><br><span class="line">    <span class="comment">// 判断队列是否为空，空就直接加进去</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//不为空判断该插在那个优先级前面</span></span><br><span class="line">      <span class="keyword">const</span> length = <span class="built_in">this</span>.items.length</span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.items[i].priority &gt; queueElement.priority) &#123;</span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement)</span><br><span class="line">          added = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 都不符合就放最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>出队</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return </span>QueueElement &#123;el, priority&#125; 返回一个带优先级的对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  dequeue (): QueueElement&lt;<span class="built_in">any</span>, <span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>返回队列第一名但不改变队列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return </span>QueueElement &#123;el, priority&#125; 返回一个带优先级的对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  front (): QueueElement&lt;<span class="built_in">any</span>, <span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;el, priority&#125; = <span class="built_in">this</span>.items[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> QueueElement&lt;<span class="built_in">any</span>, <span class="built_in">number</span>&gt;(el, priority)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>返回队列长度</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  size (): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@desc </span>判断队列是否为空</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  isEmpty (): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue()</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">priorityQueue.enqueue(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// QueueElement &#123; element: &#x27;a&#x27;, priority: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.dequeue())</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//  QueueElement &#123; element: &#x27;a&#x27;, priority: 1 &#125;,</span></span><br><span class="line"><span class="comment">//  QueueElement &#123; element: &#x27;a&#x27;, priority: 1 &#125;,</span></span><br><span class="line"><span class="comment">//  QueueElement &#123; element: &#x27;b&#x27;, priority: 2 &#125;,</span></span><br><span class="line"><span class="comment">//  QueueElement &#123; element: &#x27;b&#x27;, priority: 2 &#125;,</span></span><br><span class="line"><span class="comment">//  QueueElement &#123; element: &#x27;c&#x27;, priority: 3 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本文参考自&lt;学习JavaScript数据结构与算法&gt;。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas基础画图库</title>
      <link href="/2021/11/02/canvas%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE%E5%BA%93/"/>
      <url>/2021/11/02/canvas%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="画图库"><a href="#画图库" class="headerlink" title="画图库"></a>画图库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>width 手写板宽度</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>height 手写板高度</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>lineW 线粗</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>lineColor 线颜色</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>bgColor 手写板颜色</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>El canvas节点Dom元素</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>historyLength 历史记录条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>dataUrl 获取base64编码</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>mime 文件类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>dataURLtoBlob 获取blob文件</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>dataUrl base64编码</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>filename 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>dataURLtoFile 获取file文件</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>dataUrl base64编码</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>filename 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>downLoadUrl 获取下载地址</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>dataUrl base64编码</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>filename 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>save 保存图片</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>mime 文件类型</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@param </span>filename 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>clear 清空canvas区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>getHistory 获取操作记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>upStep 上一步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>nextStep 下一步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method </span>clearHistory 清空历史记录</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>实现了鼠标画图，自定义颜色，历史记录，上一步，下一步等功能</p><p>如图所示：</p><img src="/2021/11/02/canvas%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE%E5%BA%93/1635832336154.jpg" class=""><div class="note danger flat"><p>没有写样式，只是为了展示基本功能</p></div><blockquote><p>地址：<a href="http://gitlab.wangblogs.top/wang/drawname">http://gitlab.wangblogs.top/wang/drawname</a></p><p>网站可能会很卡。。多等一会，请求超时的话刷新一下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS算法基础-栈</title>
      <link href="/2021/10/28/JS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%A0%88/"/>
      <url>/2021/10/28/JS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="栈的概念"><a href="#栈的概念" class="headerlink" title="栈的概念"></a>栈的概念</h1><p>​        栈是一种遵从后进先出（LIFO）原则的有序集合。新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>​        栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。栈具有记忆作用，对栈的插入与删除操作中，不需要改变栈底指针。</p><p>​        通俗来讲，栈就好像一个箱子，我们放东西时从箱子顶部放入(入栈)，而最先放入的东西会被压到箱子底(栈底)，顺序放入依次从箱子底往上排，最后的东西在箱子口(栈顶)，需要拿东西的时候从箱子顶部依次拿(出栈)，</p><p>​        如图所示</p><img src="/2021/10/28/JS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%A0%88/20211028-1.jpeg" class=""><h1 id="栈的创建"><a href="#栈的创建" class="headerlink" title="栈的创建"></a>栈的创建</h1><p>在原生JS对象中并没有栈这个结构的定义，所以要使用栈就要先创造它。。。</p><p>我们先声明一个栈的类，这里使用数组去存储栈内的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  items</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的数据结构需要一些必要的方法</p><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push(el) 添加一个新元素到栈顶(入栈)</span></span><br><span class="line"><span class="comment">// pop()移除栈顶元素，同时返回被移除的元素(出栈)</span></span><br><span class="line"><span class="comment">// peek()返回栈顶元素，不对栈做任何修改</span></span><br><span class="line"><span class="comment">// isEmpty()判断栈是否为空，空返回true</span></span><br><span class="line"><span class="comment">// clear()移除栈内所有元素</span></span><br><span class="line"><span class="comment">// size()返回栈内元素个数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  items</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 入栈</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>el </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 出栈</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取栈顶元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断是否为空</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清空栈元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取栈内元素个数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈的使用"><a href="#栈的使用" class="headerlink" title="栈的使用"></a>栈的使用</h1><h2 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用new创建stack实例</span></span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="comment">// 二进制字符串</span></span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 取模入栈</span></span><br><span class="line">    <span class="keyword">let</span> rem = n % <span class="number">2</span></span><br><span class="line">    stack.push(rem)</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// 逐个出栈加到结果字符串</span></span><br><span class="line">    binaryString += stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binaryString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文参考自&lt;学习JavaScript数据结构与算法&gt;,以及百度百科。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/2021/09/07/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/09/07/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Git第一次提交代码到仓库"><a href="#Git第一次提交代码到仓库" class="headerlink" title="Git第一次提交代码到仓库"></a>Git第一次提交代码到仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化git仓库</span></span><br><span class="line">$ git init </span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 提交暂存区到仓库并填写注释</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;注释&#x27;</span></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add origin git仓库远程地址</span><br><span class="line"><span class="comment"># 将本地仓库推送到远程</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="Git拉取-检出分支"><a href="#Git拉取-检出分支" class="headerlink" title="Git拉取/检出分支"></a>Git拉取/检出分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次克隆远程仓库</span></span><br><span class="line">$ git init</span><br><span class="line">$ git <span class="built_in">clone</span> 远程仓库地址</span><br><span class="line"><span class="comment"># 检出远程分支到本地</span></span><br><span class="line">$ git checkout -b 本地分支名 origin/远程分支名</span><br><span class="line"><span class="comment"># 基于commit提交创建分支</span></span><br><span class="line">$ git checkout -b 新分支 <span class="built_in">hash</span>值</span><br></pre></td></tr></table></figure><h2 id="Git新建分支"><a href="#Git新建分支" class="headerlink" title="Git新建分支"></a>Git新建分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建本地新分支</span></span><br><span class="line">$ git branch 新分支名</span><br><span class="line"><span class="comment"># 切换本地新分支</span></span><br><span class="line">$ git checkout 新分支名</span><br><span class="line"><span class="comment"># 创建并切换到新分支</span></span><br><span class="line">$ git checkout -b 新分支名</span><br><span class="line"><span class="comment"># push到远程分支</span></span><br><span class="line">$ git push origin 新分支名:新分支名</span><br><span class="line"><span class="comment"># 检出远程分支到本地</span></span><br><span class="line">$ git checkout -b 本地分支名 origin/远程分支名</span><br><span class="line"><span class="comment"># 设置跟踪远程分支</span></span><br><span class="line">$ git branch --set-upstream-to=origin/远程分支 本地分支</span><br></pre></td></tr></table></figure><h2 id="Git删除分支"><a href="#Git删除分支" class="headerlink" title="Git删除分支"></a>Git删除分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 查看本地和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">$ git branch -d 分支名</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete 分支名</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ git push origin :分支名</span><br><span class="line"><span class="comment"># 清除本地无效分支</span></span><br><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure><h2 id="Git提交代码"><a href="#Git提交代码" class="headerlink" title="Git提交代码"></a>Git提交代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取远程代码</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 取消暂存到上一次提交，保留更改到工作区[文件名可选] --hard 将暂存区与工作区都回到上一次版本</span></span><br><span class="line">$ git reset HEAD [file]</span><br><span class="line"><span class="comment"># 提交暂存区到仓库并填写注释</span></span><br><span class="line">$ git commit -m <span class="string">&#x27;注释&#x27;</span></span><br><span class="line"><span class="comment"># 推送到远程</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="Git忽略上传文件或目录"><a href="#Git忽略上传文件或目录" class="headerlink" title="Git忽略上传文件或目录"></a>Git忽略上传文件或目录</h2><p>在.git文件夹同级新建.gitignore文件</p><p>忽略规则</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dirName// 忽略dirName目录</span><br><span class="line">文件名（带后缀名）// 忽略指定文件</span><br><span class="line">log/*// 忽略log下的所有文件</span><br><span class="line">css/*.css// 忽略css目录下的所有.css文件</span><br></pre></td></tr></table></figure><h2 id="Git贮藏"><a href="#Git贮藏" class="headerlink" title="Git贮藏"></a>Git贮藏</h2><p>当需要checkout出新的分支又不想提交当前改动时，利用贮藏储存然后checkout 新的分支，完成工作后继续上次的工作再应用贮藏的改动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行储存[备注信息可选]</span></span><br><span class="line">$ git stash [save <span class="string">&quot;save message&quot;</span>]</span><br><span class="line"><span class="comment"># 查看贮藏列表</span></span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment"># 显示做了哪些改动默认为第一个，如果显示其他后面加@&#123;$num&#125;</span></span><br><span class="line">$ git stash show [stash@&#123;1&#125;]</span><br><span class="line"><span class="comment"># 显示具体的改动</span></span><br><span class="line">$ git stash show [stash@&#123;1&#125;] -p</span><br><span class="line"><span class="comment"># 应用贮藏</span></span><br><span class="line">$ git stash apply [stash@&#123;1&#125;]</span><br><span class="line"><span class="comment"># 恢复之前的贮藏并在stash列表中删除</span></span><br><span class="line">$ git stash pop [stash@&#123;1&#125;]</span><br><span class="line"><span class="comment"># 丢弃贮藏</span></span><br><span class="line">$ git stash drop [stash@&#123;1&#125;]</span><br><span class="line"><span class="comment"># 删除所有贮藏</span></span><br><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure><div class="note red no-icon flat"><p>新增的文件不在git版本控制中不会贮藏，如果需要贮藏可以先<code>git add [file]</code>再进行贮藏</p></div>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 个人笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS深拷贝</title>
      <link href="/2021/08/18/JS%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2021/08/18/JS%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="赋值、深拷贝、浅拷贝区别"><a href="#赋值、深拷贝、浅拷贝区别" class="headerlink" title="赋值、深拷贝、浅拷贝区别"></a>赋值、深拷贝、浅拷贝区别</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>赋值是某一个<mark class="hl-label blue">数值</mark> 或<mark class="hl-label blue">变量</mark> 赋给某个<mark class="hl-label blue">变量</mark> 的过程，分为：</p><ul><li>基本数据类型：赋值后两个变量的值互相没有关联关系，改变其一不会引起另一个变量值变化。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#x27;abc&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;def&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#x27;def&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>基本数据类型赋值时会在栈内存中创建一个新值。</p></blockquote><ul><li>引用数据类型：普通赋值操作使两个变量具有相同引用，指向同一个对象，改变任何一个，另一个取到的都会是改变后的值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, age: 20&#125;</span></span><br><span class="line">a.name = <span class="string">&#x27;def&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;name: &quot;def&quot;, age: 20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;def&quot;, age: 20&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>引用类型赋值时会在栈内存中存储引用对象的指针，真实对象在堆内存中。</p><p>想要得到两个相同值的引用类型的数据，又不想让它们指向同一个对象就需要用到深拷贝。</p></blockquote><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝只是复制一层对象，当对象的属性是引用类型时，实际复制的是该属性的引用地址，当引用地址对应的值改变时，其他值为该引用地址的变量都会改变。</p><h4 id="浅拷贝-直接赋值"><a href="#浅拷贝-直接赋值" class="headerlink" title="浅拷贝-直接赋值"></a>浅拷贝-直接赋值</h4><p>该方法只能拷贝基本数据类型的值，引用类型的值第一层属性就会变成拷贝引用地址</p><blockquote><p>示例见赋值操作</p></blockquote><h4 id="浅拷贝-Object-assign"><a href="#浅拷贝-Object-assign" class="headerlink" title="浅拷贝-Object.assign()"></a>浅拷贝-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#%E6%8F%8F%E8%BF%B0">Object.assign()</a></h4><p><code>**Object.assign()**</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><p>它会拷贝浅层引用类型对象的属性，<code>只会拷贝对象的第一层属性，对象内的引用类型属性只会拷贝引用地址</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">shop</span>: &#123;</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 100&#125;&#125;</span></span><br><span class="line"><span class="comment">// 当a的值改变时</span></span><br><span class="line">a.name = <span class="string">&#x27;def&#x27;</span> <span class="comment">// 第一层属性</span></span><br><span class="line">a.shop.price = <span class="number">200</span> <span class="comment">// 第二层属性</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;name: &quot;def&quot;, shop: &#123;price: 200&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 200&#125;&#125;</span></span><br></pre></td></tr></table></figure><div class="note red no-icon flat"><p>当改变a的第二层属性时，b的属性值也改变了</p></div><h4 id="浅拷贝-‘…‘扩展运算符"><a href="#浅拷贝-‘…‘扩展运算符" class="headerlink" title="浅拷贝-‘…‘扩展运算符"></a>浅拷贝-‘<a href="https://es6.ruanyifeng.com/#docs/array#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6">…</a>‘扩展运算符</h4><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">shop</span>: &#123;</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 100&#125;&#125;</span></span><br><span class="line">a.name = <span class="string">&#x27;def&#x27;</span></span><br><span class="line">a.shop.price = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;name: &quot;def&quot;, shop: &#123;price: 200&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 200&#125;&#125;</span></span><br></pre></td></tr></table></figure><div class="note red no-icon flat"><p>同Object.assign()一样，当改变a的第二层属性时，b的属性值也改变了</p></div><h4 id="浅拷贝-Array-slice-方法"><a href="#浅拷贝-Array-slice-方法" class="headerlink" title="浅拷贝-Array.slice()方法"></a>浅拷贝-<a href="https://www.w3school.com.cn/js/jsref_slice_array.asp">Array.slice()</a>方法</h4><p><code>slice(start [,end])</code>方法不会改变原数组，会返回一个新的数组，包含从 start 到 end （不包括该元素）的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="keyword">let</span> b = a.slice(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// [0, &quot;1&quot;, [2, 3, 4]]</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">123</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">234</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [123, &quot;1&quot;, [234, 3, 4]]</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// [0, &quot;1&quot;, [234, 3, 4]]</span></span><br></pre></td></tr></table></figure><div class="note red no-icon flat"><p>这个方法只能浅拷贝数组使用</p></div><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝会拷贝对象的所有属性，相当于创建一个新的对象，深拷贝的对象与原对象除了值相同外不存在互相的引用关系，当改变一个对象属性时另一个不会发生变化，深拷贝相对于浅拷贝开销较大，拷贝前后对象互不影响。</p><h4 id="深拷贝-JSON-parse-JSON-stringify"><a href="#深拷贝-JSON-parse-JSON-stringify" class="headerlink" title="深拷贝-JSON.parse()  JSON.stringify()"></a>深拷贝-<a href="https://www.w3school.com.cn/js/js_json_parse.asp">JSON.parse()</a>  <a href="https://www.w3school.com.cn/js/js_json_stringify.asp">JSON.stringify()</a></h4><p>JSON.parse(JSON.stringify(Object))，原理是将引用类型对象转换成JSON字符串，再将字符串转换为一个对象，这时返回的对象会成为一个新的引用类型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">shop</span>: &#123;</span><br><span class="line">        <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">avatar</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">read</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">       <span class="attr">symbol</span>: <span class="built_in">Symbol</span>(<span class="string">&#x27;bcd&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 100, avatar: null&#125;&#125;</span></span><br><span class="line"><span class="comment">// 当a的值改变时</span></span><br><span class="line">a.name = <span class="string">&#x27;def&#x27;</span> <span class="comment">// 第一层属性</span></span><br><span class="line">a.shop.price = <span class="number">200</span> <span class="comment">// 第二层属性</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123;name: &quot;def&quot;, shop: &#123;price: 200, title: undefined, avatar: null, read: ƒ (), symbol: Symbol(bcd)&#125;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: &quot;abc&quot;, shop: &#123;price: 100, avatar: null&#125;&#125;</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>这个方法拷贝对象时，会有以下问题：</p><ul><li>会忽略 <code>undefined</code></li><li>会忽略 <code>symbol</code></li><li>会忽略函数</li><li>不能解决循环引用的对象(会报错Uncaught TypeError: Converting circular structure to JSON)</li><li>不能正确处理<code>new Date()</code>（会将时间对象转换为字符串时间）</li><li>不能处理正则</li></ul></div><h4 id="深拷贝-递归"><a href="#深拷贝-递归" class="headerlink" title="深拷贝-递归"></a>深拷贝-递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params"> source </span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">typeof</span> source === <span class="string">&#x27;object&#x27;</span> &amp;&amp; source !== <span class="literal">null</span>) <span class="keyword">return</span> source; <span class="comment">//如果不是对象的话直接返回</span></span><br><span class="line">    <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray( source ) ? [] : &#123;&#125; <span class="comment">//数组兼容</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> k <span class="keyword">in</span> source ) &#123;</span><br><span class="line">     <span class="keyword">if</span> (source.hasOwnProperty(k)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="keyword">typeof</span> source[ k ] === <span class="string">&#x27;object&#x27;</span> ) &#123;</span><br><span class="line">             target[ k ] = deepCopy( source[ k ] )</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             target[ k ] = source[ k ]</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="深拷贝-获取所有属性逐个添加"><a href="#深拷贝-获取所有属性逐个添加" class="headerlink" title="深拷贝-获取所有属性逐个添加"></a>深拷贝-获取所有属性逐个添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObject</span>(<span class="params">orig</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Object.create(prototype) 使用原型创建新的对象</span></span><br><span class="line">   <span class="comment">// Object.getPrototypeOf(obj) 返回对象的原型</span></span><br><span class="line">    <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(orig));</span><br><span class="line">    copyOwnPropertiesFrom(copy, orig);</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">copyOwnPropertiesFrom</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Object.getOwnPropertyNames 返回指定对象的所有属性名组成的数组（包含不可枚举属性）</span></span><br><span class="line">    <span class="comment">// Object.getOwnPropertyDescriptor 返回对象上属性对应的属性描述符</span></span><br><span class="line">    <span class="comment">// Object.defineProperty 直接在对象上定义一个新属性，或者修改一个现有属性</span></span><br><span class="line">    <span class="built_in">Object</span></span><br><span class="line">    .getOwnPropertyNames(source)</span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span> (<span class="params">propKey</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, propKey);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> desc.value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        target[propKey] = copyObject(source[propKey]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target, propKey, desc);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>后两个方法原文地址： <a href="https://www.cnblogs.com/dobeco/p/11295316.html">https://www.cnblogs.com/dobeco/p/11295316.html</a></p></blockquote><blockquote><p>方法参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo新建文章</title>
      <link href="/2021/08/17/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
      <url>/2021/08/17/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>一款编写Markdown的软件</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>标题： Ctrl/Command + 1、2、3…对应一、二、三级标题</p><p><strong>加粗</strong>：Ctrl/Command + B</p><p><em>斜体</em>：Ctrl/Command + I</p><p><u>下划线</u>：Ctrl/Command + U</p><p><del>删除线</del>：control + shift + `</p><p><code>代码片段</code>：control + `</p><p>代码块：option + command + c</p><p><a href="">链接</a>：command + k</p><p>取消格式：再按相同快捷键</p><p>有序列表：数字+点+空格</p><p>任务列表： +/-加空格</p><p>嵌套列表：Tab</p><p>插入表格：option + command + t</p><p>引用：输入&gt;加空格，或者option + command + q</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="创建一个md文件"><a href="#创建一个md文件" class="headerlink" title="创建一个md文件"></a>创建一个md文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;</span><br><span class="line">$ hexo new <span class="string">&#x27;标题&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="布局（layout）"><a href="#布局（layout）" class="headerlink" title="布局（layout）"></a>布局（layout）</h3><ul><li>创建md时，我们可以指定布局</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">$ hexo new page <span class="string">&#x27;我的页面&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p>布局有三种：<code>post</code>（文章）、<code>draft</code>（草稿）、<code>page</code>（页面）</p><p>在新建文件时，Hexo会根据<code>scaffolds</code>文件对应的文件来建立md</p></li></ul><img src="/2021/08/17/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/20210817111500.jpg" class=""><ul><li>如果没有指定默认为<code>post</code>，可以在站点配置文件修改<code>default_layout</code>参数来修改默认布局。</li></ul><blockquote><p>对于独立页面来说，Hexo会创建一个以标题为名字的文件</p></blockquote><h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p><code>draft</code>会被保存到<code>source/_drafts</code>文件夹中，但不会显示在页面上，如果不想文章显示在页面上，可以放到<code>_drafts</code>文件夹中。</p><ul><li>可以使用 <code>--draft</code> 参数查看草稿</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure><ul><li><p>还可以在站点配置文件把<code>render_drafts</code>参数设为<code>true</code>来预览草稿</p></li><li><p>可以通过<code>publish</code>指令将草稿发布文章或页面，他将会被转移到指定文件夹</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="Fornt-matter"><a href="#Fornt-matter" class="headerlink" title="Fornt-matter"></a>Fornt-matter</h3><p>当创建一个md文件后，最上方的<code>---</code>分割的区域，用于指定个别文件的变量。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo新建文章</span><br><span class="line"><span class="section">date: 2021-08-17 09:30:25</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><blockquote><p>在Typora中首行输入<code>---</code>，然后回车就可以输入<code>Fornt-matter</code>了。</p></blockquote><p>Front-matter预定参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">layout  布局  默认为true，如果你不想你的文章被处理，可以设置为false</span><br><span class="line">title  标题  标题会显示在最上方居中位置     </span><br><span class="line">date  建立日期    如果不指定则为默认值-文件创建日期，可以自定义。</span><br><span class="line">update  更新日期  如果不指定则为默认值-文件修改后重新生成静态文件的日期。</span><br><span class="line">comments  是否开启文章的评论功能 默认值为true</span><br><span class="line">tags  标签（不适用于页面page布局）</span><br><span class="line">categoreies  分类（不适用于页面page布局）</span><br><span class="line">permalink  覆盖文章网址</span><br><span class="line">keywords  仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</span><br></pre></td></tr></table></figure><h3 id="为文章添加分类标签"><a href="#为文章添加分类标签" class="headerlink" title="为文章添加分类标签"></a>为文章添加分类标签</h3><p>只有文章（post布局）支持分类和标签，需要在<code>Front-matter</code>中设置。分类有层级关系，标签没有。</p><p>举个例子：<br>1）下面文章它的标签是：Hexo、博客<br>2）分类是： 个人博客 &gt; Hexo博客<br>3）“Hexo博客” 是 “个人博客” 的子分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">个人博客（第一层级）</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo博客（第二层级）</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">博客</span></span><br></pre></td></tr></table></figure><p>为文章添加多个分类</p><p>1）下面文章属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记<br>2）其中生活、随想为日常的子分类，日常和日记为同级分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">日常</span>, <span class="string">生活</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">日常</span>, <span class="string">随想</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">日记</span>]</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>清除缓存：<code>hexo clean</code></p></li><li><p>生成静态文件：<code>hexo generate</code>可简写为 <code>hexo g</code></p></li><li><p>启动服务器：<code>hexo server</code>或者 <code>hexo s</code> 常用参数：<code>-p（--port）</code>重设端口</p></li><li><p>部署：<code>hexo deploy</code>可简写为<code>hexo d</code>，用于将网站部署到服务器上。（暂时用不到，目前都是在本地，后面我们将博客托管到<code>GitHub Pages</code>或<code>Gitee Pages</code>时才会用到此命令）<br>常用参数：<code>-g（--generate）</code>，<code>hexo d -g</code>部署前预先生成静态文件，等同于 <code>hexo g -d</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo练习 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
